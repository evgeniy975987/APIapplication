// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Workers;

namespace WebApplication2.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210320182442_testInsert")]
    partial class testInsert
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("GenreID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "GenreID");

                    b.HasIndex("GenreID");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("ConsoleApp3.Models.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("author_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("DateInsert")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("date_insert");

                    b.Property<DateTimeOffset>("DateUpdate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("date_update");

                    b.Property<string>("first_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("last_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("middle_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("middle_name");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ConsoleApp3.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_book")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateInsert")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("date_insert");

                    b.Property<DateTimeOffset>("DateUpdate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("date_update");

                    b.Property<DateTime>("DateWrite")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date_Write");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("BookID");

                    b.HasIndex("AuthorID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ConsoleApp3.Models.LibraryCards", b =>
                {
                    b.Property<int>("IDlnk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookID")
                        .HasColumnType("int");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("date_refund")
                        .HasColumnType("datetime2");

                    b.HasKey("IDlnk");

                    b.HasIndex("BookID");

                    b.HasIndex("PersonID");

                    b.ToTable("LibraryCards");
                });

            modelBuilder.Entity("Persons.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("person_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2")
                        .HasColumnName("birth_date");

                    b.Property<DateTimeOffset>("DateInsert")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("date_insert");

                    b.Property<DateTimeOffset>("DateUpdate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("date_update");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_Name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("middle_name");

                    b.HasKey("PersonID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("library.Models.Genre", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_genre")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("DateInsert")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("date_insert");

                    b.Property<DateTimeOffset>("DateUpdate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("date_update");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Genre");

                    b.HasKey("GenreID");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("ConsoleApp3.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("library.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp3.Models.Book", b =>
                {
                    b.HasOne("ConsoleApp3.Models.Author", "author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorID");

                    b.Navigation("author");
                });

            modelBuilder.Entity("ConsoleApp3.Models.LibraryCards", b =>
                {
                    b.HasOne("ConsoleApp3.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID");

                    b.HasOne("Persons.Person", "Person")
                        .WithMany("LibraryCards")
                        .HasForeignKey("PersonID");

                    b.Navigation("Book");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ConsoleApp3.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Persons.Person", b =>
                {
                    b.Navigation("LibraryCards");
                });
#pragma warning restore 612, 618
        }
    }
}
